{"version":3,"sources":["operations/ethereum.ts","shuttle-abi.ts","constants.ts","erc20.ts","EthWalletConnector.tsx","utils.ts","operations/terra.ts","TerraWalletConnector.tsx","WalletConnector.tsx","operations/1inch.ts","ConversionStep.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["UST_CONTRACT","testnet","mainnet","decodeTerraAddressOnEtherBase","address","words","bech32","decode","data","fromWords","Buffer","from","toString","error","EthToTerra","ustAmount","a","ethereumContext","terraContext","toAddress","type","shuttleBurnArgs","Run","estTx","onProgress","signer","Error","sendTransaction","txArg","ret","shuttleBurn","networkType","shuttleContract","ethers","Contract","SHUTTLE_ABI","decoded","sendAmount","utils","parseUnits","tx","burn","padEnd","hash","success","waitForShuttle","provider","publicAddress","Promise","resolve","console","debug","filter","topics","id","hexZeroPad","once","log","_","amountMinted","formatEther","ABI","BlockChain","terra","ethereum","bsc","BLOCKCHAIN_OPTIONS","NETWORK_TYPES","NETWORK_TYPE_OPTIONS","DEFAULT_NETWORK_TYPE","TERRA_NETWORK_CHAIN_IDS","TERRA_NETWORKS","mantle","shuttle","fcd","lcd","ERC20_ABI","CHAIN_ID","EthereumContext","createContext","USTBalance","refreshBalance","CONNECTED_KEY","EthWalletConnector","onChange","useState","setPublicAddress","setUSTBalance","chainId","setChainId","providerAndSigner","setProviderAndSigner","shouldRefreshBalance","setShouldRefreshBalance","useEffect","init","sessionStorage","getItem","connect","canceled","erc20","balanceOf","balance","decimals","symbol","bal","networkMismatch","onClick","disabled","Boolean","ps","color","formatUnits","handleChainChanged","_chainId","window","location","reload","detectEthereumProvider","ethereumT","request","method","on","providers","Web3Provider","getSigner","send","getAddress","setItem","TERRA_DECIMAL","printTerraAmount","coin","Dec","amount","div","replace","MIN_FEE","Coin","Int","TerraToEth","uusdDec","amountToConvert","mul","toInt","msg","MsgSend","Coins","gasPriceInUusd","estTxOptions","msgs","memo","gasPrices","uusd","getLCDClient","create","estimateFee","estimatedFee","gas","calculateTax","taxAmount","gasFeeForGasLimit","ceil","estFee","add","relayingFeeBeforMin","relayingFee","lessThan","fullFee","StdFee","network","estFees","estOutputAmount","sub","extension","reject","post","fee","payload","sleep","waitMs","setTimeout","WaitForBalanceChange","balanceHasChanged","URL","chainID","LCDClient","TerraContext","TerraWalletConnector","setExtension","wallet","setWallet","setBalance","connectInfo","setConnectInfo","bank","newBalance","toJSON","uusdBal","get","Extension","w","info","newPromise","prevResolve","WalletConnector","children","setNetworkType","setTerraContext","setEthereumContext","p","shadow","borderWidth","borderRadius","m","mb","value","e","target","borderColor","undefined","bg","map","justify","Provider","USDC_CONTRACT","estimate","amountString","inputCurrency","outputCurrency","fromTokenAddress","parseEther","fromAddress","approveUrl","fetch","then","r","json","url","fromToken","fromTokenAmount","toToken","toTokenAmount","gasPrice","valueStr","parseInt","args","Currency","currency","AllSteps","steps","setSteps","statuses","setStatuses","divider","spacing","step","i","StepForm","output","slice","onAddStep","Step","stepNumber","input","onRemoveStep","status","TransactionSummary","onStatusesChange","useContext","setNetwork","setCurrency","setAmount","estimateStep","outputAmount","catch","placeholder","event","blockChainOption","pr","min","pointerEvents","fontSize","width","mt","stepName","setStepName","size","executionSteps","setExecutionSteps","useColorModeValue","align","allowToggle","flex","textAlign","as","JSON","stringify","execute","length","push","OneInchEstimate","currStep","TerraRun","EthWaitForShuttle","EthereumRun","App","useColorMode","colorMode","toggleColorMode","className","pt","px","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","initialColorMode","document","getElementById"],"mappings":"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","file":"static/js/main.44388d1e.chunk.js","sourcesContent":["import { ethers, utils } from \"ethers\";\nimport { bech32 } from \"bech32\";\nimport SHUTTLE_ABI from \"../shuttle-abi\";\nimport { EthereumContextProps } from \"../EthWalletConnector\";\nimport { TerraContextProps } from \"../TerraWalletConnector\";\nimport { NetworkType } from \"../constants\";\n\n// From https://github.com/terra-money/shuttle/blob/main/TERRA_ASSET.md#erc20-contracts\nexport const UST_CONTRACT: Record<NetworkType, string> = {\n  testnet: \"0x6cA13a4ab78dd7D657226b155873A04DB929A3A4\",\n  mainnet: \"0xa47c8bf37f92aBed4A126BDA807A7b7498661acD\",\n} as const;\n\nconst UST_ERC20_DECIMALS = 18;\n\ntype ShuttleBurnTx = {\n  type: \"shuttleBurn\";\n  shuttleBurnArgs: {\n    toAddress: string | null | undefined;\n    ustAmount: string | undefined;\n  };\n};\n\ntype Tx = {\n  type: \"tx\";\n  txArg: ethers.providers.TransactionRequest;\n};\n\nexport type PrepTx = ShuttleBurnTx | Tx;\n\ntype WalletContexts = {\n  ethereumContext: EthereumContextProps;\n  terraContext: TerraContextProps;\n};\n\n/* bech32 */\nexport const decodeTerraAddressOnEtherBase = (address: string): string => {\n  try {\n    const { words } = bech32.decode(address);\n    const data = bech32.fromWords(words);\n    return \"0x\" + Buffer.from(data).toString(\"hex\");\n  } catch (error) {\n    return \"\";\n  }\n};\n\nexport async function EthToTerra(\n  ustAmount: string,\n  {\n    ethereumContext,\n    terraContext,\n  }: { ethereumContext: EthereumContextProps; terraContext: TerraContextProps }\n): Promise<PrepTx> {\n  // TODO: Fee estimation on Ethereum is a mystery\n  const toAddress = terraContext.address;\n\n  return {\n    type: \"shuttleBurn\",\n    shuttleBurnArgs: {\n      toAddress,\n      ustAmount,\n    },\n  };\n}\n\nexport type RunArg = PrepTx;\n\nexport async function Run(\n  estTx: PrepTx,\n  {\n    onProgress = () => {},\n    ethereumContext,\n  }: {\n    onProgress?: (status: string) => void;\n    ethereumContext: EthereumContextProps;\n  }\n) {\n  switch (estTx.type) {\n    case \"tx\":\n      if (!ethereumContext.signer) {\n        throw new Error(\"Missing signer\");\n      }\n      onProgress(\"Initiating transaction...\");\n      try {\n        const ret = await ethereumContext.signer.sendTransaction(estTx.txArg);\n        onProgress(\"Transaction successful\");\n        return ret;\n      } catch (e) {\n        onProgress(`Transaction failed ${e}`);\n        throw e;\n      }\n    case \"shuttleBurn\":\n      if (!estTx.shuttleBurnArgs) {\n        throw new Error(\"Missing args\");\n      }\n      return shuttleBurn(estTx.shuttleBurnArgs, {\n        ethereumContext,\n        onProgress,\n      });\n    default:\n      const _exhaustiveCheck: never = estTx;\n      throw new Error(`Unreachable code reached due to ${_exhaustiveCheck}`);\n  }\n}\n\nasync function shuttleBurn(\n  {\n    toAddress,\n    ustAmount,\n  }: {\n    toAddress: string | null | undefined;\n    ustAmount: string | undefined;\n  },\n  {\n    onProgress = () => {},\n    ethereumContext,\n  }: {\n    onProgress?: (status: string) => void;\n    ethereumContext: EthereumContextProps;\n  }\n) {\n  const { signer, networkType } = ethereumContext;\n\n  if (!toAddress || !ustAmount || !networkType) {\n    return;\n  }\n\n  if (!signer) {\n    return;\n  }\n\n  const shuttleContract = new ethers.Contract(\n    UST_CONTRACT[networkType],\n    SHUTTLE_ABI,\n    signer\n  );\n  const decoded = decodeTerraAddressOnEtherBase(toAddress);\n  const sendAmount = utils.parseUnits(ustAmount, UST_ERC20_DECIMALS);\n  try {\n    const tx = shuttleContract.burn(sendAmount, decoded.padEnd(66, \"0\"));\n    onProgress(\"Initiating transaction...\");\n    const { hash } = await tx;\n    onProgress(\"Transaction successful.\");\n    return { success: true, hash };\n  } catch (error) {\n    throw error;\n    // return handleTxErrorFromEtherBase(error)\n  }\n}\n\nexport async function waitForShuttle({ ethereumContext }: WalletContexts) {\n  const { provider, publicAddress, networkType } = ethereumContext;\n  if (!publicAddress) {\n    throw new Error(\"No public address of ethereum wallet\");\n  }\n  if (!provider) {\n    throw new Error(\"No provider\");\n  }\n  if (!networkType) {\n    throw new Error(\"No network type selected\");\n  }\n\n  return new Promise((resolve) => {\n    // Look for transfers to the target address\n    // Since it's bridged, this is minted (i.e. fromAddress=0x0).\n    const address = UST_CONTRACT[networkType];\n    console.debug(\n      `Waiting for contract (${address}) transfer() activity to `,\n      publicAddress\n    );\n    const filter = {\n      address,\n      topics: [\n        utils.id(\"Transfer(address,address,uint256)\"),\n        utils.hexZeroPad(\"0x0\", 32 /* length of these fields */),\n        utils.hexZeroPad(publicAddress, 32),\n      ],\n    };\n    provider.once(filter, (log, _) => {\n      const { data } = log;\n      const amountMinted = utils.formatEther(data);\n      resolve(amountMinted);\n    });\n  });\n}\n","// https://github.com/terra-money/bridge-web-app/blob/060979b7966d66368d54819a7c83f68949e71014/src/consts/abi.json\nconst ABI = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function decimals() view returns (uint8)\",\n  \"function symbol() view returns (string)\",\n\n  \"function earned(address account) public view returns (uint256)\",\n  \"function allowance(address owner, address spender) external view returns (uint256)\",\n\n  \"function totalSupply() public view returns (uint256)\",\n  \"function currentReward() public view returns (uint256)\",\n  \"function lastTimeRewardApplicable() public view returns (uint256)\",\n  \"function rewardPerToken() public view returns (uint256)\",\n\n  \"function transfer(address to, uint amount) returns (boolean)\",\n  \"function burn(uint256 amount, bytes32 to) returns (boolean)\",\n  \"function approve(address spender, uint256 amount) external returns (bool)\",\n  \"function stake(uint256 amount) external\",\n  \"function withdraw(uint256 amount) external\",\n  \"function getReward() external\",\n  \"function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external\",\n\n  \"event Transfer(address indexed from, address indexed to, uint amount)\",\n];\n\nexport default ABI;\n","export const BlockChain = {\n  terra: \"Terra\",\n  ethereum: \"Ethereum\",\n  bsc: \"Binance Smart Chain\",\n} as const;\n\nexport type BlockChainType = keyof typeof BlockChain;\nexport const BLOCKCHAIN_OPTIONS: BlockChainType[] = [\"ethereum\", \"terra\"];\n\nexport const NETWORK_TYPES = {\n  testnet: \"Testnet: Ropsten / Tequila\",\n  mainnet: \"Main Net\",\n} as const;\n\nexport type NetworkType = keyof typeof NETWORK_TYPES;\n\nexport const NETWORK_TYPE_OPTIONS: NetworkType[] = [\"testnet\", \"mainnet\"];\n\nexport const DEFAULT_NETWORK_TYPE: keyof typeof NETWORK_TYPES = \"testnet\";\n\n// From Terra Bridge app\nexport type ShuttleNetwork = \"bsc\" | \"ethereum\";\n\nexport interface LocalTerraNetwork {\n  /** Graphql server URL */\n  mantle: string;\n  /** Ethereum */\n  shuttle: Record<ShuttleNetwork, string>;\n  lcd: string;\n  fcd: string;\n}\n\nexport const TERRA_NETWORK_CHAIN_IDS: Record<NetworkType, string> = {\n  mainnet: \"columbus-4\",\n  testnet: \"tequila-0004\",\n};\n\nexport const TERRA_NETWORKS: Record<NetworkType, LocalTerraNetwork> = {\n  mainnet: {\n    mantle: \"https://mantle.terra.dev/\",\n    // Validate via https://github.com/terra-money/shuttle/blob/main/TERRA_ASSET.md#usage-instructions\n    shuttle: {\n      ethereum: \"terra13yxhrk08qvdf5zdc9ss5mwsg5sf7zva9xrgwgc\",\n      bsc: \"terra1g6llg3zed35nd3mh9zx6n64tfw3z67w2c48tn2\",\n    },\n    fcd: \"https://fcd.terra.dev\",\n    lcd: \"https://lcd.terra.dev\",\n  },\n  testnet: {\n    mantle: \"https://tequila-mantle.terra.dev/\",\n    shuttle: {\n      ethereum: \"terra10a29fyas9768pw8mewdrar3kzr07jz8f3n73t3\",\n      bsc: \"terra1paav7jul3dzwzv78j0k59glmevttnkfgmgzv2r\",\n    },\n    fcd: \"https://tequila-fcd.terra.dev\",\n    lcd: \"https://tequila-lcd.terra.dev\",\n  },\n};\n","// A Human-Readable ABI; any supported ABI format could be used\nexport const ERC20_ABI = [\n  // Read-Only Functions\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function decimals() view returns (uint8)\",\n  \"function symbol() view returns (string)\",\n\n  // Authenticated Functions\n  \"function transfer(address to, uint amount) returns (boolean)\",\n\n  // Events\n  \"event Transfer(address indexed from, address indexed to, uint amount)\",\n];\n\n// // This can be an address or an ENS name\n// const address = \"dai.tokens.ethers.eth\";\n\n// // An example Provider\n// const provider = ethers.getDefaultProvider();\n\n// // An example Signer\n// const signer = ethers.Wallet.createRandom().connect(provider);\n\n// // Read-Only; By connecting to a Provider, allows:\n// // - Any constant function\n// // - Querying Filters\n// // - Populating Unsigned Transactions for non-constant methods\n// // - Estimating Gas for non-constant (as an anonymous sender)\n// // - Static Calling non-constant methods (as anonymous sender)\n// const erc20 = new ethers.Contract(address, abi, provider);\n\n// // Read-Write; By connecting to a Signer, allows:\n// // - Everything from Read-Only (except as Signer, not anonymous)\n// // - Sending transactions for non-constant functions\n// const erc20_rw = new ethers.Contract(address, abi, signer)\n","import React, { createContext, useEffect, useState } from \"react\";\nimport { Box, Button } from \"@chakra-ui/react\";\nimport { ethers, utils, BigNumber, providers } from \"ethers\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\n\nimport { NetworkType } from \"./constants\";\nimport { ERC20_ABI } from \"./erc20\";\n\nconst CHAIN_ID: Record<NetworkType, string> = {\n  testnet: \"0x3\",\n  mainnet: \"0x1\",\n};\n\n// From https://github.com/terra-money/shuttle/blob/main/TERRA_ASSET.md#erc20-contracts\nconst UST_CONTRACT: Record<NetworkType, string> = {\n  testnet: \"0x6cA13a4ab78dd7D657226b155873A04DB929A3A4\",\n  mainnet: \"0xa47c8bf37f92aBed4A126BDA807A7b7498661acD\",\n};\n\nexport type EthereumContextProps = {\n  USTBalance: Balance | null;\n  publicAddress: string | null;\n  provider: ethers.providers.Web3Provider | null;\n  signer: ethers.providers.JsonRpcSigner | null;\n  refreshBalance: () => void;\n  networkType: NetworkType | null;\n};\n\nexport const EthereumContext = createContext<EthereumContextProps>({\n  USTBalance: null,\n  publicAddress: null,\n  provider: null,\n  signer: null,\n  refreshBalance: () => {},\n  networkType: null,\n});\n\ntype Props = {\n  networkType: NetworkType;\n  onChange: (e: EthereumContextProps) => void;\n};\n\ntype Balance = {\n  balance: BigNumber;\n  decimals: any;\n  symbol: string;\n};\n\nfunction printBalance(bal: Balance | null) {\n  return (bal && utils.formatUnits(bal.balance, bal.decimals)) || \"\";\n}\n\nconst CONNECTED_KEY = \"eth_connected\";\n\nexport function EthWalletConnector({ networkType, onChange }: Props) {\n  const [publicAddress, setPublicAddress] = useState<string | null>(null);\n  const [USTBalance, setUSTBalance] = useState<Balance | null>(null);\n  const [chainId, setChainId] = useState<string | null>(null);\n  const [providerAndSigner, setProviderAndSigner] = useState<{\n    provider: ethers.providers.Web3Provider | null;\n    signer: ethers.providers.JsonRpcSigner | null;\n  } | null>(null);\n  const [shouldRefreshBalance, setShouldRefreshBalance] =\n    useState<boolean>(true);\n\n  useEffect(() => {\n    init();\n    if (sessionStorage.getItem(CONNECTED_KEY) === CONNECTED_KEY) {\n      connect();\n    }\n  }, []);\n\n  useEffect(() => {\n    let canceled = false;\n\n    (async () => {\n      if (\n        !providerAndSigner ||\n        !providerAndSigner?.provider ||\n        !publicAddress ||\n        !shouldRefreshBalance\n      ) {\n        return;\n      }\n\n      const { provider } = providerAndSigner;\n      try {\n        const erc20 = new ethers.Contract(\n          UST_CONTRACT[networkType],\n          ERC20_ABI,\n          provider\n        );\n        const balance: BigNumber = await erc20.balanceOf(publicAddress);\n        const decimals = await erc20.decimals();\n        const symbol = await erc20.symbol();\n        if (canceled) {\n          return;\n        }\n        setUSTBalance({ balance, decimals, symbol });\n        setShouldRefreshBalance(false);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n\n    return () => {\n      canceled = true;\n    };\n  }, [providerAndSigner, publicAddress, shouldRefreshBalance, networkType]);\n\n  useEffect(() => {\n    onChange({\n      USTBalance,\n      publicAddress,\n      provider: providerAndSigner?.provider || null,\n      signer: providerAndSigner?.signer || null,\n      refreshBalance,\n      networkType,\n    });\n  }, [onChange, USTBalance, publicAddress, providerAndSigner, networkType]);\n\n  const networkMismatch = chainId !== CHAIN_ID[networkType];\n  return (\n    <Box>\n      <Button onClick={connect} disabled={Boolean(publicAddress)}>\n        {publicAddress ? `Connected` : \"Connect\"} to Ethereum\n      </Button>\n      {networkMismatch ? (\n        <Box ps={2} color=\"red\">\n          Network mismatch.\n        </Box>\n      ) : null}\n      <Box ps={2}>\n        <small>\n          {publicAddress}\n          {USTBalance ? (\n            <div>\n              <pre>{printBalance(USTBalance)} UST</pre>\n            </div>\n          ) : null}\n        </small>\n      </Box>\n    </Box>\n  );\n\n  async function init() {\n    const provider = await detectEthereumProvider();\n\n    if (provider) {\n      // If the provider returned by detectEthereumProvider is not the same as\n      // window.ethereum, something is overwriting it, perhaps another wallet.\n      if (provider !== window.ethereum) {\n        console.error(\"Do you have multiple wallets installed?\");\n      }\n    } else {\n      console.log(\"Please install MetaMask!\");\n    }\n\n    const ethereumT = window.ethereum;\n    if (!ethereumT) {\n      return;\n    }\n    type MetaMaskProvider = providers.ExternalProvider & {\n      on: (e: string, f: (_: any) => void) => void;\n    };\n    const ethereum: MetaMaskProvider = ethereumT as MetaMaskProvider;\n    if (!ethereum.request) {\n      return;\n    }\n\n    const chainId = await ethereum.request({ method: \"eth_chainId\" });\n    if (chainId !== CHAIN_ID[networkType]) {\n      console.error(\"Network chosen does not match Eth network\");\n    }\n    setChainId(chainId);\n\n    ethereum.on(\"chainChanged\", handleChainChanged);\n\n    function handleChainChanged(_chainId: any) {\n      // We recommend reloading the page, unless you must do otherwise\n      window.location.reload();\n    }\n  }\n\n  async function connect() {\n    if (!window.ethereum) {\n      return;\n    }\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    setProviderAndSigner({\n      provider,\n      signer,\n    });\n\n    await provider.send(\"eth_requestAccounts\", []);\n    const publicAddress = await signer.getAddress();\n    setPublicAddress(publicAddress);\n\n    sessionStorage.setItem(CONNECTED_KEY, CONNECTED_KEY);\n  }\n\n  function refreshBalance() {\n    setShouldRefreshBalance(true);\n  }\n}\n","import { Coin, Dec } from \"@terra-money/terra.js\";\n\nexport const TERRA_DECIMAL = 1e6;\n\nexport function printTerraAmount(coin: Coin | null | undefined) {\n  if (!coin) {\n    return \"\";\n  }\n  return (\n    new Dec(coin.amount)\n      .div(TERRA_DECIMAL)\n      .toString()\n      // Remove trailing space\n      .replace(/\\.?0+$/, \"\")\n  );\n}\n","import {\n  Coin,\n  Coins,\n  Dec,\n  MsgSend,\n  StdFee,\n  CreateTxOptions,\n  Int,\n  LCDClient,\n} from \"@terra-money/terra.js\";\nimport { printTerraAmount, TERRA_DECIMAL } from \"../utils\";\nimport { RefreshBalanceRet, TerraContextProps } from \"../TerraWalletConnector\";\nimport { WalletContexts } from \"../types\";\nimport {\n  NetworkType,\n  TERRA_NETWORKS,\n  TERRA_NETWORK_CHAIN_IDS,\n} from \"../constants\";\n\nconst MIN_FEE = new Coin(\"uusd\", new Int(1 * TERRA_DECIMAL));\n\nexport interface EstTx {\n  network: \"terra\";\n  amount: Coin;\n  estTx: CreateTxOptions;\n  estFees: StdFee;\n  relayingFee: Coin;\n  estOutputAmount: string;\n}\n\nexport async function TerraToEth(\n  uusdDec: string,\n  { ethereumContext, terraContext }: WalletContexts\n): Promise<EstTx> {\n  const { address, networkType } = terraContext;\n  if (!networkType) {\n    throw new Error(\"No network type selected.\");\n  }\n  if (!address) {\n    throw new Error(\"No address found.\");\n  }\n  if (!ethereumContext.publicAddress) {\n    throw new Error(\"No Ethereum address found.\");\n  }\n\n  const amountToConvert = new Coin(\n    \"uusd\",\n    new Dec(uusdDec).mul(TERRA_DECIMAL).toInt()\n  );\n\n  // https://docs.terra.money/dev/#currency-denominations\n  const msg = new MsgSend(\n    address,\n    TERRA_NETWORKS[networkType].shuttle.ethereum,\n    new Coins([amountToConvert])\n  );\n\n  const gasPriceInUusd = 0.15; // in uusd. TODO: This can change and should be retrieved from lcd.\n  const estTxOptions: CreateTxOptions = {\n    msgs: [msg],\n    memo: ethereumContext.publicAddress,\n    gasPrices: new Coins({ uusd: gasPriceInUusd }),\n  };\n  // Fee calculation is a PITA\n  // See https://github.com/terra-money/bridge-web-app/blob/060979b7966d66368d54819a7c83f68949e71014/src/hooks/useSend.ts#L139-L197\n  const terra = getLCDClient(terraContext);\n  const estTx = await terra.tx.create(address, estTxOptions);\n  const estimatedFee = await terra.tx.estimateFee(estTx);\n  console.log(\"estimated gas needed\", estimatedFee.gas);\n\n  // Fee calculation is a PITA. Assume everything here is being calculated in uusd\n  const taxAmount = await terra.utils.calculateTax(amountToConvert);\n  // From https://tequila-fcd.terra.dev/v1/txs/gas_prices\n  const gasFeeForGasLimit = new Int(estimatedFee.gas)\n    .mul(gasPriceInUusd)\n    .ceil(); // in uusd\n\n  const estFee = taxAmount.add(gasFeeForGasLimit);\n  const relayingFeeBeforMin = amountToConvert.mul(0.1 * 0.01); // 0.1%\n  const relayingFee = relayingFeeBeforMin.amount.lessThan(MIN_FEE.amount)\n    ? MIN_FEE\n    : relayingFeeBeforMin; // Or $1\n  // Need to apply min fee\n  const fullFee = new StdFee(estimatedFee.gas, [estFee]);\n\n  return {\n    network: \"terra\",\n    amount: amountToConvert,\n    estTx: estTxOptions,\n    estFees: fullFee,\n    relayingFee,\n    estOutputAmount: printTerraAmount(amountToConvert.sub(relayingFee)),\n  };\n}\n\nexport type RunArg = EstTx;\n\nexport async function Run(\n  estTx: EstTx,\n  {\n    onProgress = () => {},\n    terraContext,\n  }: {\n    onProgress?: (status: string) => void;\n    terraContext: TerraContextProps;\n  }\n) {\n  const { extension } = terraContext;\n  if (!estTx || !extension) {\n    return;\n  }\n\n  return new Promise((resolve, reject) => {\n    extension.post({\n      ...estTx.estTx,\n      fee: estTx.estFees,\n    });\n    extension.once(\"onPost\", (payload) => {\n      if (payload.error) {\n        reject(payload);\n        onProgress(\"Transaction failed.\");\n        return;\n      }\n      console.log(payload);\n      resolve(payload);\n      onProgress(`Transaction ID: ${payload.id}, Success: ${payload.success}`);\n    });\n    onProgress(\"Posting transaction...\");\n  });\n}\n\nasync function sleep(waitMs: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, waitMs);\n  });\n}\n\nexport async function WaitForBalanceChange({ terraContext }: WalletContexts) {\n  let ret: RefreshBalanceRet | void;\n  while (!ret?.balanceHasChanged) {\n    // TODO: Exponential backoff?\n    console.debug(\"Waiting, no change\");\n    await sleep(5000);\n    ret = await terraContext.refreshBalance();\n  }\n  console.debug(\"Done waiting\");\n  return;\n}\n\nexport function getLCDClient({\n  networkType,\n}: {\n  networkType: NetworkType | null;\n}) {\n  if (!networkType) {\n    throw new Error(\"No network type selected.\");\n  }\n  const URL = TERRA_NETWORKS[networkType].lcd;\n  const chainID = TERRA_NETWORK_CHAIN_IDS[networkType];\n  return new LCDClient({\n    URL,\n    chainID,\n  });\n}\n","import React, { createContext, useEffect, useState } from \"react\";\nimport { Box, Button } from \"@chakra-ui/react\";\n\nimport { Extension, Coins } from \"@terra-money/terra.js\";\nimport { printTerraAmount } from \"./utils\";\nimport { NetworkType, TERRA_NETWORKS } from \"./constants\";\nimport { getLCDClient } from \"./operations/terra\";\n\n// Return true if the balance has changed\nexport type RefreshBalanceRet = {\n  balanceHasChanged: boolean;\n};\nexport type RefreshBalanceFn =\n  | (() => Promise<RefreshBalanceRet>)\n  | (() => void);\n\nexport type TerraContextProps = {\n  extension: Extension | null;\n  address: string | null;\n  balance: Coins | null;\n  refreshBalance: RefreshBalanceFn;\n  networkType: NetworkType | null;\n};\n\nexport interface InfoResponse {\n  chainID: string;\n  fcd: string;\n  lcd: string;\n  name: string;\n}\n\nexport const TerraContext = createContext<TerraContextProps>({\n  extension: null,\n  address: null,\n  balance: null,\n  refreshBalance: () => {},\n  networkType: null,\n});\n\ntype Props = {\n  networkType: NetworkType;\n  onChange: (t: TerraContextProps) => void;\n};\n\nconst CONNECTED_KEY = \"terra_connected\";\n\ntype ShouldRefreshBalanceType = {\n  resolve: (ret: RefreshBalanceRet | Promise<RefreshBalanceRet>) => void;\n};\n\nexport function TerraWalletConnector({ networkType, onChange }: Props) {\n  const [extension, setExtension] = useState<Extension | null>(null);\n  const [wallet, setWallet] = useState<string | null>(null);\n  const [balance, setBalance] = useState<Coins | null>(null);\n  const [connectInfo, setConnectInfo] = useState<InfoResponse | null>(null);\n  const [shouldRefreshBalance, setShouldRefreshBalance] =\n    useState<null | ShouldRefreshBalanceType>(null);\n\n  // Helps with refreshes and development\n  useEffect(() => {\n    if (sessionStorage.getItem(CONNECTED_KEY) === CONNECTED_KEY) {\n      connect();\n    }\n  }, []);\n\n  useEffect(() => {\n    refreshBalance();\n  }, [wallet, networkType]);\n\n  // Use state to set up a refreshing state\n  useEffect(() => {\n    let canceled = false;\n    if (!shouldRefreshBalance) {\n      return;\n    }\n    if (!wallet) {\n      return;\n    }\n    (async () => {\n      const newBalance = await getLCDClient({ networkType }).bank.balance(\n        wallet\n      );\n      if (canceled) {\n        return;\n      }\n      const balanceHasChanged = balance?.toJSON() !== newBalance.toJSON();\n      if (balanceHasChanged) {\n        setBalance(newBalance);\n      }\n      shouldRefreshBalance.resolve({\n        balanceHasChanged,\n      });\n      // I had no idea where to put this line. And why if I put it anywhere above, it wouldn't work.\n      // The interaction between canceled and shouldRefreshBalance, + the setState function, totally messed me up.\n      // Please remember sending a function to setState, not expected!\n      setShouldRefreshBalance(null);\n    })();\n    return () => {\n      canceled = true;\n      // Should resolve the old balance into the new version\n      // Should this reject the old refresh call or return a new one?\n    };\n  }, [shouldRefreshBalance, wallet, balance, networkType]);\n\n  // Argument of type '() => Promise<{ balanceHasChanged: boolean; } | undefined>' is not assignable to parameter of type 'RefreshBalanceRet'.\n  // Property 'balanceHasChanged' is missing in type '() => Promise<{ balanceHasChanged: boolean; } | undefined>' but required in type 'RefreshBalanceRet'.\n\n  useEffect(() => {\n    if (connectInfo && TERRA_NETWORKS[networkType].lcd !== connectInfo.lcd) {\n      console.error(\"Network chosen does not match Terra extension network\");\n    }\n\n    onChange({\n      /* TODO: Use Memo */\n      extension,\n      address: wallet,\n      balance,\n      networkType,\n      refreshBalance,\n    });\n  }, [onChange, extension, wallet, balance, networkType, connectInfo]);\n\n  const uusdBal = balance && balance.get(\"uusd\");\n  const networkMismatch =\n    connectInfo && TERRA_NETWORKS[networkType].lcd !== connectInfo.lcd;\n\n  return (\n    <Box>\n      <Button onClick={connect} disabled={Boolean(wallet)}>\n        {wallet ? `Connected` : \"Connect\"} to Terra\n      </Button>\n      {networkMismatch ? (\n        <Box ps={2} color=\"red\">\n          Network mismatch.\n        </Box>\n      ) : null}\n      <Box ps={2}>\n        <small>\n          {wallet}\n          {uusdBal ? (\n            <div>\n              <pre>{printTerraAmount(uusdBal)} UST</pre>\n            </div>\n          ) : null}\n        </small>\n      </Box>\n    </Box>\n  );\n\n  type ConnectResponse = {\n    address: string;\n  };\n\n  function connect() {\n    const extension = new Extension();\n    extension.connect();\n    extension.on(\"onConnect\", (w: ConnectResponse) => {\n      setWallet(w.address);\n\n      extension.info();\n      extension.on(\"onInfo\", (info: InfoResponse) => {\n        setConnectInfo(info);\n      });\n    });\n    setExtension(extension);\n    sessionStorage.setItem(CONNECTED_KEY, CONNECTED_KEY);\n  }\n\n  /**\n   * Be careful with referencing state within this function.\n   * The function is used elsewhere and needs to always get the latest\n   * values. Hence, the use of getters and useRef to store state.\n   *\n   * There might be cleaner patterns for doing this.\n   * TODO: in the future.\n   */\n  async function refreshBalance(): Promise<RefreshBalanceRet> {\n    // This seems super complex/unreadable. Are we overthinking this? Lol.\n    const newPromise: Promise<RefreshBalanceRet> = new Promise((resolve) => {\n      // Careful about calling setState with a function.\n      // React calls instead of setting it as state.\n      setShouldRefreshBalance((prevResolve) => {\n        prevResolve?.resolve(newPromise);\n        return {\n          resolve,\n        };\n      });\n    });\n    return newPromise;\n  }\n}\n","import React, { useState } from \"react\";\nimport { Box, Select, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport {\n  DEFAULT_NETWORK_TYPE,\n  NetworkType,\n  NETWORK_TYPES,\n  NETWORK_TYPE_OPTIONS,\n} from \"./constants\";\nimport {\n  EthWalletConnector,\n  EthereumContext,\n  EthereumContextProps,\n} from \"./EthWalletConnector\";\nimport {\n  TerraWalletConnector,\n  TerraContext,\n  TerraContextProps,\n} from \"./TerraWalletConnector\";\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport function WalletConnector({ children }: Props) {\n  const [networkType, setNetworkType] =\n    useState<NetworkType>(DEFAULT_NETWORK_TYPE);\n  const [terraContext, setTerraContext] = useState<TerraContextProps>({\n    extension: null,\n    address: null,\n    balance: null,\n    refreshBalance: () => {},\n    networkType: DEFAULT_NETWORK_TYPE,\n  });\n  const [ethereumContext, setEthereumContext] = useState<EthereumContextProps>({\n    USTBalance: null,\n    publicAddress: null,\n    provider: null,\n    signer: null,\n    refreshBalance: () => {},\n    networkType: DEFAULT_NETWORK_TYPE,\n  });\n\n  return (\n    <Box>\n      <Box p={4} shadow=\"md\" borderWidth=\"1px\" borderRadius=\"md\" m={5}>\n        <Box>\n          <Select\n            mb={2}\n            value={networkType}\n            onChange={(e) => setNetworkType(e.target.value as NetworkType)}\n            borderColor={networkType === \"mainnet\" ? \"red.500\" : undefined}\n            bg={networkType === \"mainnet\" ? \"red.500\" : \"transparent\"}\n          >\n            {NETWORK_TYPE_OPTIONS.map((networkType) => (\n              <option key={networkType} value={networkType}>\n                {NETWORK_TYPES[networkType]}\n              </option>\n            ))}\n          </Select>\n        </Box>\n        <Wrap justify=\"space-evenly\">\n          <WrapItem>\n            <EthWalletConnector\n              networkType={networkType}\n              onChange={setEthereumContext}\n            />\n          </WrapItem>\n          <WrapItem>\n            <TerraWalletConnector\n              networkType={networkType}\n              onChange={setTerraContext}\n            />\n          </WrapItem>\n        </Wrap>\n      </Box>\n      <Box>\n        <TerraContext.Provider value={terraContext}>\n          <EthereumContext.Provider value={ethereumContext}>\n            {children}\n          </EthereumContext.Provider>\n        </TerraContext.Provider>\n      </Box>\n    </Box>\n  );\n}\n","import { utils } from \"ethers\";\nimport { EthereumContextProps } from \"../EthWalletConnector\";\nimport { PrepTx, UST_CONTRACT } from \"./ethereum\";\n\n// https://etherscan.io/token/0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\nconst USDC_CONTRACT = \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\";\n\ntype Arg = {\n  args: PrepTx;\n  info: {};\n};\n\ninterface TokenResponse {\n  symbol: string;\n  name: string;\n  decimals: number;\n  address: string;\n}\n\ntype SwapResponse = {\n  fromToken: TokenResponse;\n  toToken: TokenResponse;\n  fromTokenAmount: string;\n  toTokenAmount: string;\n  tx: any;\n};\n\nexport async function estimate(\n  {\n    amountString,\n    inputCurrency,\n    outputCurrency,\n  }: { amountString: string; inputCurrency: string; outputCurrency: string },\n  { ethereumContext }: { ethereumContext: EthereumContextProps }\n): Promise<Arg> {\n  const { publicAddress } = ethereumContext;\n\n  if (!(inputCurrency === \"UST\" && outputCurrency === \"USDC\")) {\n    throw new Error(\n      `Unsupported currencies, only UST to USDC is supported. You requested ${inputCurrency} -> ${outputCurrency}`\n    );\n  }\n\n  const fromTokenAddress = UST_CONTRACT.mainnet;\n  const toTokenAddress = USDC_CONTRACT;\n  const amount = utils.parseEther(amountString);\n  // TODO: Add referrerAddress is pretty cool, incentivizes the right behaviors, along with fee\n  // const url = `https://api.1inch.exchange/v3.0/1/quote?fromTokenAddress=${fromTokenAddress}&toTokenAddress=${toTokenAddress}&amount=${amount}`;\n\n  const fromAddress = publicAddress;\n  const slippage = 0.5;\n  // TODO: Check back later\n  const approveUrl = `https://api.1inch.exchange/v3.0/1/approve/calldata?amount=${amount}&tokenAddress=${fromTokenAddress}`;\n  const approveRequest = fetch(approveUrl)\n    .then((r) => r.json())\n    .then((data: any) => {\n      // test this\n      console.log(\"approval request\", data);\n    });\n\n  // Will return fail if it doesn't have allowance.\n  const disableEstimate = true; // remove later\n  const url = `https://api.1inch.exchange/v3.0/1/swap?fromTokenAddress=${fromTokenAddress}&toTokenAddress=${toTokenAddress}&amount=${amount}&fromAddress=${fromAddress}&slippage=${slippage}${\n    disableEstimate ? \"&disableEstimate=true\" : \"\"\n  }`;\n  return fetch(url)\n    .then((r) => r.json())\n    .then((data: SwapResponse) => {\n      console.log(data);\n\n      /* Not yet tested */\n      const { tx, fromToken, fromTokenAmount, toToken, toTokenAmount } = data;\n      // Ethers will fill these\n      delete tx.gas;\n      delete tx.gasPrice;\n\n      // Make value into hex per https://docs.1inch.io/api/nodejs-web3-example\n      const valueInt = parseInt(tx[\"value\"]); //get the value from the transaction\n      const valueStr = \"0x\" + valueInt.toString(16); //add a leading 0x after converting from decimal to hexadecimal\n      tx[\"value\"] = valueStr;\n      return {\n        info: {\n          fromToken,\n          fromTokenAmount,\n          toToken,\n          toTokenAmount,\n        },\n        args: {\n          type: \"tx\",\n          txArg: tx,\n        },\n      };\n    });\n}\n\nfunction convertTxForTxArg(tx: any) {\n  // Ethers will fill these\n  delete tx.gas;\n  delete tx.gasPrice;\n\n  // Make value into hex per https://docs.1inch.io/api/nodejs-web3-example\n  const valueInt = parseInt(tx[\"value\"]); //get the value from the transaction\n  const valueStr = \"0x\" + valueInt.toString(16); //add a leading 0x after converting from decimal to hexadecimal\n  tx[\"value\"] = valueStr;\n  return tx;\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  Select,\n  Input,\n  InputGroup,\n  InputRightElement,\n  VStack,\n  StackDivider,\n  Box,\n  HStack,\n  Heading,\n  Code,\n  Accordion,\n  AccordionItem,\n  AccordionButton,\n  AccordionPanel,\n  Spinner,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\n\nimport { EthereumContext, EthereumContextProps } from \"./EthWalletConnector\";\nimport { TerraContext, TerraContextProps } from \"./TerraWalletConnector\";\nimport {\n  TerraToEth,\n  Run as TerraRun,\n  RunArg as TerraRunArg,\n  WaitForBalanceChange,\n} from \"./operations/terra\";\nimport {\n  EthToTerra,\n  Run as EthereumRun,\n  RunArg as EthereumRunArg,\n  waitForShuttle as EthWaitForShuttle,\n} from \"./operations/ethereum\";\nimport { estimate as OneInchEstimate } from \"./operations/1inch\";\nimport { BlockChain, BlockChainType, BLOCKCHAIN_OPTIONS } from \"./constants\";\nimport { WalletContexts } from \"./types\";\n\nclass Currency {\n  network: BlockChainType | null = null;\n  currency: \"UST\" | \"USDC\" | string | null = null;\n  amount?: string | null = null; // Might need to check on a standard amount\n  // there's some fees involved\n}\n\ninterface StepFormProps {\n  input?: Currency;\n  output: Currency;\n  onChange: (output: Currency) => void;\n  onAddStep: () => void;\n  onRemoveStep?: () => void;\n  // output, fees\n}\n\ntype Status = string | null;\n\ninterface ConversionStepProps extends StepFormProps {\n  input: Currency;\n  stepNumber: number;\n  status: Status;\n  onRemoveStep: () => void;\n  // output, fees\n}\n\nexport function AllSteps() {\n  const [steps, setSteps] = useState<Currency[]>([new Currency()]);\n  const [statuses, setStatuses] = useState<Status[]>([]);\n  return (\n    <Box p={4} shadow=\"md\" borderWidth=\"1px\" borderRadius=\"md\" m={5}>\n      <VStack divider={<StackDivider borderColor=\"gray.200\" />} spacing={4}>\n        {steps.map((step, i) =>\n          i === 0 ? (\n            <Box key={0}>\n              <StepForm\n                output={step}\n                onChange={(output) => setSteps([output, ...steps.slice(1)])}\n                onAddStep={() =>\n                  setSteps([\n                    ...steps.slice(0, i + 1),\n                    new Currency(),\n                    ...steps.slice(i + 1),\n                  ])\n                }\n              />\n            </Box>\n          ) : (\n            <Step\n              stepNumber={i - 1}\n              key={i}\n              input={steps[i - 1]}\n              output={step}\n              onChange={(output) =>\n                setSteps([...steps.slice(0, i), output, ...steps.slice(i + 1)])\n              }\n              onAddStep={() =>\n                setSteps([\n                  ...steps.slice(0, i + 1),\n                  new Currency(),\n                  ...steps.slice(i + 1),\n                ])\n              }\n              onRemoveStep={() =>\n                setSteps([...steps.slice(0, i), ...steps.slice(i + 1)])\n              }\n              status={statuses[i - 1]}\n            />\n          )\n        )}\n        <TransactionSummary steps={steps} onStatusesChange={setStatuses} />\n      </VStack>\n    </Box>\n  );\n}\n\nexport function StepForm({\n  input,\n  output,\n  onChange,\n  onAddStep,\n  onRemoveStep,\n}: StepFormProps) {\n  const terraContext = useContext(TerraContext);\n  const ethereumContext = useContext(EthereumContext);\n\n  const setNetwork = (network: BlockChainType) => {\n    onChange({\n      ...output,\n      network,\n    });\n  };\n\n  const setCurrency = (currency: string) => {\n    onChange({\n      ...output,\n      currency,\n    });\n  };\n\n  const setAmount = (amount: string) => {\n    onChange({\n      ...output,\n      amount,\n    });\n  };\n\n  useEffect(() => {\n    if (!input || !output) {\n      return;\n    }\n    const estStep = estimateStep(input, output, {\n      terraContext,\n      ethereumContext,\n    });\n    estStep\n      .then((e) => {\n        if (!output.amount && e.info.outputAmount) {\n          setAmount(e.info.outputAmount);\n        }\n      })\n      .catch((e) => {\n        console.debug(e);\n      });\n  }, [input, output, terraContext, ethereumContext]);\n\n  // No constraints, pick whatever you want and handle the estimates\n  return (\n    <>\n      <HStack>\n        <FormControl>\n          <FormLabel>Network</FormLabel>\n          <Select\n            placeholder=\"Select network\"\n            value={output.network || \"\"}\n            onChange={(event) =>\n              setNetwork(event.target.value as BlockChainType)\n            }\n          >\n            {BLOCKCHAIN_OPTIONS.map((blockChainOption) => (\n              <option key={blockChainOption} value={blockChainOption}>\n                {BlockChain[blockChainOption]}\n              </option>\n            ))}\n          </Select>\n        </FormControl>\n        {input?.network !== \"terra\" ? (\n          <FormControl>\n            <FormLabel>Currency</FormLabel>\n            <Select\n              placeholder=\"Select currency\"\n              onChange={(event) => setCurrency(event.target.value)}\n            >\n              <option>UST</option>\n              <option>USDC</option>\n            </Select>\n          </FormControl>\n        ) : null}\n      </HStack>\n      <FormControl>\n        <FormLabel>Amount</FormLabel>\n        <InputGroup>\n          <Input\n            placeholder=\"Enter amount\"\n            type=\"number\"\n            pr=\"4.5rem\"\n            min=\"0\"\n            value={output.amount || \"\"}\n            onChange={(event) => setAmount(event.target.value)}\n          />\n          <InputRightElement\n            pointerEvents=\"none\"\n            color=\"gray.300\"\n            fontSize=\"1.2em\"\n            width=\"4.5rem\"\n            children={output.currency}\n          />\n        </InputGroup>\n      </FormControl>\n      <HStack mt={5}>\n        <Button onClick={onAddStep}>Add Step</Button>\n        {onRemoveStep ? (\n          <Button onClick={onRemoveStep}>Remove Step</Button>\n        ) : null}\n      </HStack>\n    </>\n  );\n}\n\nexport function Step({\n  stepNumber,\n  input,\n  output,\n  onChange,\n  onAddStep,\n  onRemoveStep,\n  status,\n}: ConversionStepProps) {\n  const [stepName, setStepName] = useState(\"\");\n\n  useEffect(() => {\n    if (!input.network || !output.network) {\n      return;\n    }\n    switch (true) {\n      case input.network !== output.network:\n        setStepName(\n          `Bridge ${BlockChain[input.network]} to ${BlockChain[output.network]}`\n        );\n        break;\n      default:\n        setStepName(`Step  ${stepNumber + 1}`);\n    }\n  }, [input, output, stepNumber]);\n\n  return (\n    <Box>\n      <Heading size=\"md\">{stepName}</Heading>\n      <StepForm\n        input={input}\n        output={output}\n        onAddStep={onAddStep}\n        onRemoveStep={onRemoveStep}\n        onChange={onChange}\n      />\n      {status ? (\n        <>\n          <Spinner />\n          {status}\n        </>\n      ) : null}\n    </Box>\n  );\n}\n\ntype TransactionSummaryProps = {\n  steps: Currency[];\n  onStatusesChange: (statuses: Status[]) => void;\n};\n\nexport function TransactionSummary({\n  steps,\n  onStatusesChange,\n}: TransactionSummaryProps) {\n  const terraContext = useContext(TerraContext);\n  const ethereumContext = useContext(EthereumContext);\n  const [executionSteps, setExecutionSteps] = useState<ExecutionStep[] | null>(\n    null\n  );\n\n  useEffect(() => {\n    const est = estimate(\n      { steps, terraContext, ethereumContext },\n      setExecutionSteps\n    );\n    est.catch((e) => {\n      console.debug(e);\n    });\n  }, [steps, terraContext, ethereumContext]);\n\n  const bg = useColorModeValue(\"teal.100\", \"teal.800\");\n  return (\n    <VStack bg={bg} m={5} p={2} borderRadius=\"md\" align=\"start\">\n      <Heading size=\"lg\">Summary</Heading>\n      {/* <Code as=\"pre\">{JSON.stringify(steps, null, 2)}</Code> */}\n      <Button\n        onClick={() =>\n          estimate({ steps, terraContext, ethereumContext }, setExecutionSteps)\n        }\n      >\n        Estimate Transaction\n      </Button>\n      {executionSteps && (\n        <Box>\n          <Accordion allowToggle>\n            <AccordionItem>\n              <AccordionButton>\n                <Box flex=\"1\" textAlign=\"left\">\n                  Show Debug Info\n                </Box>\n              </AccordionButton>\n              <AccordionPanel>\n                <Code w=\"500px\" as=\"pre\" fontSize=\"8\">\n                  {JSON.stringify(executionSteps, null, 2)}\n                </Code>\n              </AccordionPanel>\n            </AccordionItem>\n          </Accordion>\n          <Button\n            onClick={() =>\n              execute({\n                executionSteps,\n                steps,\n                terraContext,\n                ethereumContext,\n                onStatusesChange,\n              })\n            }\n          >\n            Execute\n          </Button>\n        </Box>\n      )}\n    </VStack>\n  );\n}\n\ntype estimateArg = {\n  steps: Currency[];\n  terraContext: TerraContextProps;\n  ethereumContext: EthereumContextProps;\n};\n\ninterface ExecutionStepInfo {\n  outputAmount?: string;\n}\n\ntype ExecutionStep =\n  | {\n      network: \"eth\";\n      args: EthereumRunArg;\n      info: ExecutionStepInfo;\n    }\n  | {\n      network: \"terra\";\n      args: TerraRunArg;\n      info: ExecutionStepInfo;\n    };\n\nasync function estimate(\n  { steps, terraContext, ethereumContext }: estimateArg,\n  setExecutionSteps: (steps: ExecutionStep[]) => void\n) {\n  // Do a bunch of things and then update the estimates and create intermediate transactions.\n  const executionSteps: ExecutionStep[] = [];\n  for (let i = 1; i < steps.length; i++) {\n    executionSteps.push(\n      await estimateStep(steps[i - 1], steps[i], {\n        terraContext,\n        ethereumContext,\n      })\n    );\n  }\n  setExecutionSteps(executionSteps);\n}\n\nasync function estimateStep(\n  input: Currency,\n  output: Currency,\n  { terraContext, ethereumContext }: WalletContexts\n): Promise<ExecutionStep> {\n  if (input.network === \"terra\" && output.network === \"ethereum\") {\n    // To Shuttle\n    if (!input.amount) {\n      throw new Error(\"No input amount\");\n    }\n    const estTx = await TerraToEth(input.amount, {\n      terraContext,\n      ethereumContext,\n    });\n    return {\n      network: \"terra\",\n      args: estTx,\n      info: {\n        outputAmount: estTx.estOutputAmount,\n      },\n    };\n  } else if (input.network === \"ethereum\" && output.network === \"terra\") {\n    if (!input.amount) {\n      throw new Error(\"No input amount\");\n    }\n    // To Shuttle\n    const estTx = await EthToTerra(input.amount, {\n      terraContext,\n      ethereumContext,\n    });\n    return {\n      network: \"eth\",\n      args: estTx,\n      info: {},\n    };\n  } else if (input.network === \"ethereum\" && output.network === \"ethereum\") {\n    if (!input.amount) {\n      throw new Error(\"No input amount\");\n    }\n    const { currency: inputCurrency } = input;\n    const { currency: outputCurrency } = output;\n    if (!inputCurrency || !outputCurrency) {\n      throw new Error(\"No specified input/output currencies\");\n    }\n\n    // 1inch route\n    const ret = await OneInchEstimate(\n      {\n        amountString: input.amount,\n        inputCurrency,\n        outputCurrency,\n      },\n      { ethereumContext }\n    );\n    return {\n      network: \"eth\",\n      args: ret.args,\n      info: ret.info,\n    };\n  }\n\n  throw new Error(\n    `Unimplemented operation ${JSON.stringify(input)} to ${JSON.stringify(\n      output\n    )}`\n  );\n}\n\ntype executeArg = {\n  executionSteps: ExecutionStep[];\n  steps: Currency[];\n  terraContext: TerraContextProps;\n  ethereumContext: EthereumContextProps;\n  onStatusesChange: (statuses: Status[]) => void;\n};\n\nasync function execute({\n  executionSteps,\n  steps,\n  terraContext,\n  ethereumContext,\n  onStatusesChange,\n}: executeArg) {\n  let statuses: Status[] = [];\n  for (let i = 0; i < executionSteps.length; i++) {\n    const step = executionSteps[i];\n    const currStep = i;\n    // eslint-disable-next-line no-loop-func\n    const onProgress = (status: Status) => {\n      statuses = [\n        ...statuses.slice(0, currStep),\n        status,\n        ...statuses.slice(currStep + 1),\n      ];\n      console.debug(\"onProgress:\", status);\n      onStatusesChange(statuses);\n    };\n    onProgress(\"Initiating step...\");\n    switch (step.network) {\n      case \"terra\":\n        await TerraRun(step.args, { terraContext, onProgress });\n        terraContext.refreshBalance();\n        onProgress(\"Waiting for transaction on Eth side\");\n        await EthWaitForShuttle({ ethereumContext, terraContext });\n        ethereumContext.refreshBalance();\n        break;\n      case \"eth\":\n        if (steps[i + 1].network === \"terra\") {\n          onProgress(\"Preparing for transaction...\");\n          // Get a snapshot of the current balance. So that we can watch for balance changes\n          // if coins were bridged.\n          await terraContext.refreshBalance();\n        }\n        await EthereumRun(step.args, { ethereumContext, onProgress });\n        // TODO: This doesn't get the new balance immediately :|\n        // Try another method to poll, possibly another UX pattern.\n        ethereumContext.refreshBalance();\n        if (steps[i + 1].network === \"terra\") {\n          // This is naive and just watches for any changes in the balance.\n          // This doesn't watch for changes in CW20 coins, only native coins.\n          onProgress(\"Waiting for transaction on Terra side\");\n          await WaitForBalanceChange({ terraContext, ethereumContext });\n        }\n        break;\n    }\n    onProgress(null);\n  }\n}\n","import React from \"react\";\nimport { Box, Button, HStack, Heading, useColorMode } from \"@chakra-ui/react\";\nimport { WalletConnector } from \"./WalletConnector\";\nimport { AllSteps } from \"./ConversionStep\";\n\nfunction App() {\n  const { colorMode, toggleColorMode } = useColorMode();\n  return (\n    <div className=\"App\">\n      <HStack pt={2} px={5} justify=\"space-between\">\n        <Heading>Modular Ramp</Heading>\n        <Box textAlign=\"right\">\n          <Button onClick={toggleColorMode}>\n            Toggle {colorMode === \"light\" ? \"Dark\" : \"Light\"}\n          </Button>\n        </Box>\n      </HStack>\n      <WalletConnector>\n        <AllSteps />\n      </WalletConnector>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider, ColorModeScript } from \"@chakra-ui/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript initialColorMode={\"system\"} />\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}